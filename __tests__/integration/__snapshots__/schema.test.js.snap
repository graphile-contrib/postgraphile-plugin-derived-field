// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`prints a schema with the plugin and some derived field definitions 1`] = `
"\\"\\"\\"All input for the create \`Person\` mutation.\\"\\"\\"
input CreatePersonInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Person\` to be created by this mutation.\\"\\"\\"
  person: PersonInput!
}

\\"\\"\\"The output of our create \`Person\` mutation.\\"\\"\\"
type CreatePersonPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Person\` that was created by this mutation.\\"\\"\\"
  person: Person

  \\"\\"\\"An edge for our \`Person\`. May be used by Relay 1.\\"\\"\\"
  personEdge(
    \\"\\"\\"The method to use when ordering \`Person\`.\\"\\"\\"
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"A location in a connection that can be used for resuming pagination.\\"\\"\\"
scalar Cursor

\\"\\"\\"All input for the \`deletePersonById\` mutation.\\"\\"\\"
input DeletePersonByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!
}

\\"\\"\\"All input for the \`deletePerson\` mutation.\\"\\"\\"
input DeletePersonInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Person\` to be deleted.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our delete \`Person\` mutation.\\"\\"\\"
type DeletePersonPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String
  deletedPersonId: ID

  \\"\\"\\"The \`Person\` that was deleted by this mutation.\\"\\"\\"
  person: Person

  \\"\\"\\"An edge for our \`Person\`. May be used by Relay 1.\\"\\"\\"
  personEdge(
    \\"\\"\\"The method to use when ordering \`Person\`.\\"\\"\\"
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

enum MenuExtrasType {
  EMAILS
  LOCATIONS
  LOGO
  PHONES
  SEARCH
}

type MenuExtrasWithDefault {
  isEnabled: Boolean
  menuExtra: MenuExtrasType
}

\\"\\"\\"
The root mutation type which contains root level fields which mutate data.
\\"\\"\\"
type Mutation {
  \\"\\"\\"Creates a single \`Person\`.\\"\\"\\"
  createPerson(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: CreatePersonInput!
  ): CreatePersonPayload

  \\"\\"\\"Deletes a single \`Person\` using its globally unique id.\\"\\"\\"
  deletePerson(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeletePersonInput!
  ): DeletePersonPayload

  \\"\\"\\"Deletes a single \`Person\` using a unique key.\\"\\"\\"
  deletePersonById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeletePersonByIdInput!
  ): DeletePersonPayload

  \\"\\"\\"Updates a single \`Person\` using its globally unique id and a patch.\\"\\"\\"
  updatePerson(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdatePersonInput!
  ): UpdatePersonPayload

  \\"\\"\\"Updates a single \`Person\` using a unique key and a patch.\\"\\"\\"
  updatePersonById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdatePersonByIdInput!
  ): UpdatePersonPayload
}

\\"\\"\\"An object with a globally unique \`ID\`.\\"\\"\\"
interface Node {
  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type PageInfo {
  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: Cursor

  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean!

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean!

  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: Cursor
}

\\"\\"\\"A connection to a list of \`Person\` values.\\"\\"\\"
type PeopleConnection {
  \\"\\"\\"
  A list of edges which contains the \`Person\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [PeopleEdge!]!

  \\"\\"\\"A list of \`Person\` objects.\\"\\"\\"
  nodes: [Person]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Person\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Person\` edge in the connection.\\"\\"\\"
type PeopleEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Person\` at the end of the edge.\\"\\"\\"
  node: Person
}

\\"\\"\\"Methods to use when ordering \`Person\`.\\"\\"\\"
enum PeopleOrderBy {
  AVATAR_KEY_ASC
  AVATAR_KEY_DESC
  EMAIL_ASC
  EMAIL_DESC
  ID_ASC
  ID_DESC
  MENU_EXTRAS_ASC
  MENU_EXTRAS_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Person implements Node {
  avatarKey: String
  avatarUrl: String

  \\"\\"\\"The person’s name and email\\"\\"\\"
  combinedNameAndEmail: String

  \\"\\"\\"The person’s email\\"\\"\\"
  email: String!
  hasName: Boolean
  id: Int!
  menuExtras: [MenuExtrasType]
  menuExtrasWithDefaults: [MenuExtrasWithDefault]

  \\"\\"\\"The person’s name\\"\\"\\"
  name: String!

  \\"\\"\\"The person’s initials\\"\\"\\"
  nameInitials: String

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A condition to be used against \`Person\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input PersonCondition {
  \\"\\"\\"Checks for equality with the object’s \`avatarKey\` field.\\"\\"\\"
  avatarKey: String

  \\"\\"\\"Checks for equality with the object’s \`email\` field.\\"\\"\\"
  email: String

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`menuExtras\` field.\\"\\"\\"
  menuExtras: [MenuExtrasType]

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String
}

\\"\\"\\"An input for mutations affecting \`Person\`\\"\\"\\"
input PersonInput {
  avatarKey: String

  \\"\\"\\"The person’s email\\"\\"\\"
  email: String!
  id: Int
  menuExtras: [MenuExtrasType]

  \\"\\"\\"The person’s name\\"\\"\\"
  name: String!
}

\\"\\"\\"
Represents an update to a \`Person\`. Fields that are set will be updated.
\\"\\"\\"
input PersonPatch {
  avatarKey: String

  \\"\\"\\"The person’s email\\"\\"\\"
  email: String
  id: Int
  menuExtras: [MenuExtrasType]

  \\"\\"\\"The person’s name\\"\\"\\"
  name: String
}

\\"\\"\\"The root query type which gives access points into the data universe.\\"\\"\\"
type Query implements Node {
  \\"\\"\\"Reads and enables pagination through a set of \`Person\`.\\"\\"\\"
  allPeople(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: PersonCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Person\`.\\"\\"\\"
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleConnection

  \\"\\"\\"Fetches an object given its globally unique \`ID\`.\\"\\"\\"
  node(
    \\"\\"\\"The globally unique \`ID\`.\\"\\"\\"
    nodeId: ID!
  ): Node

  \\"\\"\\"
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"Reads a single \`Person\` using its globally unique \`ID\`.\\"\\"\\"
  person(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Person\`.\\"\\"\\"
    nodeId: ID!
  ): Person
  personById(id: Int!): Person

  \\"\\"\\"
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  \\"\\"\\"
  query: Query!
}

\\"\\"\\"All input for the \`updatePersonById\` mutation.\\"\\"\\"
input UpdatePersonByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!

  \\"\\"\\"
  An object where the defined keys will be set on the \`Person\` being updated.
  \\"\\"\\"
  personPatch: PersonPatch!
}

\\"\\"\\"All input for the \`updatePerson\` mutation.\\"\\"\\"
input UpdatePersonInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Person\` to be updated.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"
  An object where the defined keys will be set on the \`Person\` being updated.
  \\"\\"\\"
  personPatch: PersonPatch!
}

\\"\\"\\"The output of our update \`Person\` mutation.\\"\\"\\"
type UpdatePersonPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Person\` that was updated by this mutation.\\"\\"\\"
  person: Person

  \\"\\"\\"An edge for our \`Person\`. May be used by Relay 1.\\"\\"\\"
  personEdge(
    \\"\\"\\"The method to use when ordering \`Person\`.\\"\\"\\"
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}
"
`;

exports[`prints a schema without the plugin 1`] = `
"\\"\\"\\"All input for the create \`Person\` mutation.\\"\\"\\"
input CreatePersonInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Person\` to be created by this mutation.\\"\\"\\"
  person: PersonInput!
}

\\"\\"\\"The output of our create \`Person\` mutation.\\"\\"\\"
type CreatePersonPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Person\` that was created by this mutation.\\"\\"\\"
  person: Person

  \\"\\"\\"An edge for our \`Person\`. May be used by Relay 1.\\"\\"\\"
  personEdge(
    \\"\\"\\"The method to use when ordering \`Person\`.\\"\\"\\"
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"A location in a connection that can be used for resuming pagination.\\"\\"\\"
scalar Cursor

\\"\\"\\"All input for the \`deletePersonById\` mutation.\\"\\"\\"
input DeletePersonByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!
}

\\"\\"\\"All input for the \`deletePerson\` mutation.\\"\\"\\"
input DeletePersonInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Person\` to be deleted.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our delete \`Person\` mutation.\\"\\"\\"
type DeletePersonPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String
  deletedPersonId: ID

  \\"\\"\\"The \`Person\` that was deleted by this mutation.\\"\\"\\"
  person: Person

  \\"\\"\\"An edge for our \`Person\`. May be used by Relay 1.\\"\\"\\"
  personEdge(
    \\"\\"\\"The method to use when ordering \`Person\`.\\"\\"\\"
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

enum MenuExtrasType {
  EMAILS
  LOCATIONS
  LOGO
  PHONES
  SEARCH
}

\\"\\"\\"
The root mutation type which contains root level fields which mutate data.
\\"\\"\\"
type Mutation {
  \\"\\"\\"Creates a single \`Person\`.\\"\\"\\"
  createPerson(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: CreatePersonInput!
  ): CreatePersonPayload

  \\"\\"\\"Deletes a single \`Person\` using its globally unique id.\\"\\"\\"
  deletePerson(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeletePersonInput!
  ): DeletePersonPayload

  \\"\\"\\"Deletes a single \`Person\` using a unique key.\\"\\"\\"
  deletePersonById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeletePersonByIdInput!
  ): DeletePersonPayload

  \\"\\"\\"Updates a single \`Person\` using its globally unique id and a patch.\\"\\"\\"
  updatePerson(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdatePersonInput!
  ): UpdatePersonPayload

  \\"\\"\\"Updates a single \`Person\` using a unique key and a patch.\\"\\"\\"
  updatePersonById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdatePersonByIdInput!
  ): UpdatePersonPayload
}

\\"\\"\\"An object with a globally unique \`ID\`.\\"\\"\\"
interface Node {
  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type PageInfo {
  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: Cursor

  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean!

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean!

  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: Cursor
}

\\"\\"\\"A connection to a list of \`Person\` values.\\"\\"\\"
type PeopleConnection {
  \\"\\"\\"
  A list of edges which contains the \`Person\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [PeopleEdge!]!

  \\"\\"\\"A list of \`Person\` objects.\\"\\"\\"
  nodes: [Person]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Person\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Person\` edge in the connection.\\"\\"\\"
type PeopleEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Person\` at the end of the edge.\\"\\"\\"
  node: Person
}

\\"\\"\\"Methods to use when ordering \`Person\`.\\"\\"\\"
enum PeopleOrderBy {
  AVATAR_KEY_ASC
  AVATAR_KEY_DESC
  EMAIL_ASC
  EMAIL_DESC
  ID_ASC
  ID_DESC
  MENU_EXTRAS_ASC
  MENU_EXTRAS_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Person implements Node {
  avatarKey: String

  \\"\\"\\"The person’s email\\"\\"\\"
  email: String!
  id: Int!
  menuExtras: [MenuExtrasType]

  \\"\\"\\"The person’s name\\"\\"\\"
  name: String!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A condition to be used against \`Person\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input PersonCondition {
  \\"\\"\\"Checks for equality with the object’s \`avatarKey\` field.\\"\\"\\"
  avatarKey: String

  \\"\\"\\"Checks for equality with the object’s \`email\` field.\\"\\"\\"
  email: String

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`menuExtras\` field.\\"\\"\\"
  menuExtras: [MenuExtrasType]

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String
}

\\"\\"\\"An input for mutations affecting \`Person\`\\"\\"\\"
input PersonInput {
  avatarKey: String

  \\"\\"\\"The person’s email\\"\\"\\"
  email: String!
  id: Int
  menuExtras: [MenuExtrasType]

  \\"\\"\\"The person’s name\\"\\"\\"
  name: String!
}

\\"\\"\\"
Represents an update to a \`Person\`. Fields that are set will be updated.
\\"\\"\\"
input PersonPatch {
  avatarKey: String

  \\"\\"\\"The person’s email\\"\\"\\"
  email: String
  id: Int
  menuExtras: [MenuExtrasType]

  \\"\\"\\"The person’s name\\"\\"\\"
  name: String
}

\\"\\"\\"The root query type which gives access points into the data universe.\\"\\"\\"
type Query implements Node {
  \\"\\"\\"Reads and enables pagination through a set of \`Person\`.\\"\\"\\"
  allPeople(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: PersonCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Person\`.\\"\\"\\"
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleConnection

  \\"\\"\\"Fetches an object given its globally unique \`ID\`.\\"\\"\\"
  node(
    \\"\\"\\"The globally unique \`ID\`.\\"\\"\\"
    nodeId: ID!
  ): Node

  \\"\\"\\"
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"Reads a single \`Person\` using its globally unique \`ID\`.\\"\\"\\"
  person(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Person\`.\\"\\"\\"
    nodeId: ID!
  ): Person
  personById(id: Int!): Person

  \\"\\"\\"
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  \\"\\"\\"
  query: Query!
}

\\"\\"\\"All input for the \`updatePersonById\` mutation.\\"\\"\\"
input UpdatePersonByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!

  \\"\\"\\"
  An object where the defined keys will be set on the \`Person\` being updated.
  \\"\\"\\"
  personPatch: PersonPatch!
}

\\"\\"\\"All input for the \`updatePerson\` mutation.\\"\\"\\"
input UpdatePersonInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Person\` to be updated.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"
  An object where the defined keys will be set on the \`Person\` being updated.
  \\"\\"\\"
  personPatch: PersonPatch!
}

\\"\\"\\"The output of our update \`Person\` mutation.\\"\\"\\"
type UpdatePersonPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Person\` that was updated by this mutation.\\"\\"\\"
  person: Person

  \\"\\"\\"An edge for our \`Person\`. May be used by Relay 1.\\"\\"\\"
  personEdge(
    \\"\\"\\"The method to use when ordering \`Person\`.\\"\\"\\"
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}
"
`;
